moe = qnorm(sqrt(0.6*0.4/100))
moe
print(0.6+c(-moe,moe))
# For 95% confidence interval for n=400
moe = qnorm(sqrt(0.6*0.4/400))
moe
print(0.6+c(-moe,moe))
For 95% confidence interval for n=36 & p=0.6
#moe = z * sqrt(p*(1-p)/n)
moe = qnorm(sqrt(0.6*0.4/36))
moe
print(0.6+c(-moe,moe))
# For 95% confidence interval for n=100
moe = qnorm(sqrt(0.6*0.4/100))
moe
print(0.6+c(-moe,moe))
# For 95% confidence interval for n=400
moe = qnorm(sqrt(0.6*0.4/400))
moe
print(0.6+c(-moe,moe))
# For 95% confidence interval for n=36 & p=0.6
#moe = z * sqrt(p*(1-p)/n)
moe = qnorm(sqrt(0.6*0.4/36))
moe
print(0.6+c(-moe,moe))
# For 95% confidence interval for n=100
moe = qnorm(sqrt(0.6*0.4/100))
moe
print(0.6+c(-moe,moe))
# For 95% confidence interval for n=400
moe = qnorm(sqrt(0.6*0.4/400))
moe
print(0.6+c(-moe,moe))
m=0.01
α = 0.1
n=(qnorm(1-α/2))^2/(4m)^2
n
m=0.01
α = 0.1
n=(qnorm(1-α/2))^2/(4m)^2
n
m=0.01
alpha = 0.1
n=(qnorm(1-alpha/2))^2/(4m)^2
n
m=0.3
alpha = 0.05
n=(qnorm(1-alpha/2))^2/(4m)^2
n
m=0.3
alpha = 0.05
n=((qnorm(1-alpha/2))^2/(4m)^2)
n
m=0.3
alpha = 0.05
n = ((qnorm(1 - alpha / 2)) ^ 2 / (4m) ^ 2)
n
n = (qnorm(1 - α / 2)) ^ 2 / (4m) ^ 2
m=0.3
alpha = 0.05
n = ((qnorm(1 - alpha / 2)) ^ 2
n
m=0.3
alpha = 0.05
n = (qnorm(1 - alpha / 2)) ^ 2
n
m=0.3
alpha = 0.05
n = (qnorm(1 - alpha / 2)) ^ 2
samplesize = n / (4m) ^ 2)
samplesize
m=0.3
alpha = 0.05
n = (qnorm(1 - alpha / 2)) ^ 2
samplesize = n / (4m) ^ 2
samplesize
m=0.3
alpha = 0.05
n = (qnorm(1 - alpha / 2)) ^ 2
ss = (n / (4m) ^ 2)
ss
ss <- (n / (4m) ^ 2)
ss
m=0.3
alpha = 0.05
n = (qnorm(1 - alpha / 2)) ^ 2
ss = (n / (4m) ^ 2)
m=0.3
alpha = 0.05
n = (qnorm(1 - alpha / 2)) ^ 2
n
ss = (n / (4m) ^ 2)
m=0.3
alpha = 0.05
n = (qnorm(1 - alpha / 2)) ^ 2
n
ss = (n / (4m * 4m))
m=0.3
alpha = 0.05
n = (qnorm(1 - alpha / 2)) ^ 2
n
ss = (n / (4m * 4m))
ss
m=0.3
alpha = 0.05
n = (qnorm(1 - alpha / 2)) ^ 2
n
ss = (n / (4m * 4m))
print(ss)
m=0.3
alpha = 0.05
n = (qnorm(1 - alpha / 2)) ^ 2
n
ss = (n / (4 * m) ^ 2)
print(ss)
m=0.3
alpha = 0.05
n = (qnorm(1 - alpha / 2)) ^ 2 / (4 * m) ^ 2
n
m=0.3
α = 0.05
n = (qnorm(1 - α / 2)) ^ 2 / (4 * m) ^ 2
n
m = 0.1
α = 0.1
n = (qnorm(1 - α / 2)) ^ 2 / (4 * m) ^ 2
n
m=0.03
α = 0.05
n = (qnorm(1 - α / 2)) ^ 2 / (4 * m) ^ 2
n
m = 0.01
α = 0.1
n = (qnorm(1 - α / 2)) ^ 2 / (4 * m) ^ 2
n
m=0.05
α=0.01
n = (qnorm(1 - α / 2)) ^ 2 / (4 * m) ^ 2
n
m = 0.01
α = 0.1
n = (qnorm(1 - α / 2)) ^ 2 / (4 * m) ^ 2
n
m=0.03
α = 0.05
n = (qnorm(1 - α / 2)) ^ 2 / (4 * m) ^ 2
n
m=0.05
α=0.01
n = (qnorm(1 - α / 2)) ^ 2 / (4 * m) ^ 2
n
xbar = 24
mu0 = 25
sigma = 3
n = 25
z = (xbar−mu0)/(sigma/sqrt(n))
z
z = (xbar − mu0)/(sigma / sqrt(n))
z
z = (xbar − mu0) / (sigma / sqrt (n))
z
xbar = 24
mu0 = 25
sigma = 3
n = 25
z = (xbar − mu0) / (sigma / sqrt (n))
z
xbar = 24
mu0 = 25
sigma = 3
n = 25
z = (mu0 − xbar) / (sigma / sqrt (n))
z
z = (xbar - mu0) / (sigma / sqrt (n))
z
xbar = 24
mu0 = 25
sigma = 3
n = 25
z = (xbar - mu0) / (sigma / sqrt (n))
z
print("The test statistic is",z)
pval = pnorm(z)
pval
xbar = 24
mu0 = 25
sigma = 3
n = 25
z = (xbar - mu0) / (sigma / sqrt (n))
z
pval = pnorm(z)
pval
alpha = 0.05
z.alpha = qnorm(1-alpha)
-z.alpha
alpha = 0.05
z.alpha = qnorm(1-alpha)
-z.alpha
n = 25
s = 3
SE = s / sqrt(n) #Standard Error
SE
alpha = 0.05
mu0 = 23
q = mu0 + qt(alpha, df = n-1) * SE
q
alpha = 0.05
mu0 = 23
q = mu0 + qt(alpha, df = n-1, lower.tail = F) * SE
q
alpha = 0.05
mu0 = 23
q = mu0 + qt(alpha, df = n-1) * SE
q
mu = 25
pt((q-mu)/SE, df = n-1)
alpha = 0.05
mu0 = 23
q = mu0 + qt(alpha, df = n-1, lower.tail = F) * SE
q
mu = 25
pt((q-mu)/SE, df = n-1)
data <- read.csv("Golf.csv")
print(data)
nrow(mat)
mat <- as.matrix(data)
class(mat)
nrow(mat)
samplemean <- apply(mat, 1, mean)
samplemean
mean(data)
samplesd <- apply(mat, 1, sd)
samplesd
samplesize <- apply(mat, 1, ci = 95, p=0.5)
pwr.t.test(d=d, sig.level=.05, power = .90, type = 'two.sample')
install.packages("pwr")
require("pwr")
install.packages("pwr")
install.packages("pwr")
require("pwr")
pwr.t.test(d=d, sig.level=.05, power = .90, type = 'two.sample')
delta <- samplemean
sigma <- samplesd
d <- delta / sigma
d
pwr.t.test(d=d, sig.level=.05, power = .90, type = 'two.sample')
pwr.t.test(
d = d,
sig.level = .05,
power = .90,
type = 'two.sample'
)
data <- read.csv("Golf.csv")
print(data)
mat <- as.matrix(data) #Converting to matrix
class(mat)
samplemean <- apply(mat, 1, mean) #Sample mean of each model
samplemean
samplesd <- apply(mat, 1, sd) #Sample standard deviation of each model
samplesd
mat[1,]
t.test(mat[1,], mat[2,])
t.test(mat[1,], mat[40,])
data <- read.csv("Golf.csv")
sd(data)/sqrt(length(data))
data <- read.csv("Golf.csv")
samplesd <- apply(mat, 1, sd) #Sample standard deviation of each model
samplesd
samplesd / sqrt(length(samplesd))
se <- samplesd / sqrt(length(samplesd))
se
data.df(data)
t.test(Current , New)
Current <- table(Golf$Current)
Current
Current <- table(Current$Golf)
Current
c <- (Golf$Current)
c
data <- read.csv("Golf.csv")
data
table(data$Current)
c <- table(data$Current)
n <- table(data$New)
t.test(c , n)
data <- read.csv("Golf.csv")
data
c <- table(data$Current)
n <- table(data$New)
t.test(c , n)
c <- table(data$Current)
n <- table(data$New)
ttest = t.test(c , n)
ttest$Current
data <- read.csv("Golf.csv")
data
c <- table(data$Current)
n <- table(data$New)
t.test(c , n)
write.table(P_val, file="Golf.csv", sep = ",")
pval = 2 * pt(t , df = n - 1)
t=0
pval = 2 * pt(t , df = n - 1)
pval = 2 * pt(t , df = n - 1)
pval = 2 * pt(t , df = 39)
pval = 2 * pt(t , df = 39)
pval
t=0
n=40
pval = 2 * pt(t , df = n - 1)
pval
SE = sqrt((sd(c)^2/NROW(c))+(sd(n)^2/NROW(n)))
print(SE)
sd(c)
sd(n)
n <- table(data$New)
n
sd(c)
sd(n)
SE = sqrt((sd(c)^2/NROW(c))+(sd(n)^2/NROW(n)))
SE = sqrt((sd(c)^2/NROW(c))+(sd(n)^2/NROW(n)))
SE
testStatistic = (mean(c)-mean(n))/SE
testStatistic
testStatistic = (mean(c)-mean(n))/SE
testStatistic
mean(c)
mean(n)
mean(n)
mean(c)
testStatistic
z = (mean(c)-mean(n))/SE
pvalue = 2*pnorm(z, lower.tail=FALSE)
print(pvalue)
t.test(c, n, var.equal = TRUE)
t.test(c, var.equal = TRUE)
t.test(c,n)
m1 = (2.95, 3.45, 3.50, 3.75, 3.48, 3.26, 3.33, 3.20, 3.16, 3.20, 3.22, 3.38, 3.90, 3.36, 3.25, 3.28, 3.20, 3.22, 2.98, 3.45, 3.70, 3.34, 3.18, 3.35, 3.12)
m1 = [2.95, 3.45, 3.50, 3.75, 3.48, 3.26, 3.33, 3.20, 3.16, 3.20, 3.22, 3.38, 3.90, 3.36, 3.25, 3.28, 3.20, 3.22, 2.98, 3.45, 3.70, 3.34, 3.18, 3.35, 3.12]
m1 = 2.95, 3.45, 3.50, 3.75, 3.48, 3.26, 3.33, 3.20, 3.16, 3.20, 3.22, 3.38, 3.90, 3.36, 3.25, 3.28, 3.20, 3.22, 2.98, 3.45, 3.70, 3.34, 3.18, 3.35, 3.12
m1 = c(2.95, 3.45, 3.50, 3.75, 3.48, 3.26, 3.33, 3.20, 3.16, 3.20, 3.22, 3.38, 3.90, 3.36, 3.25, 3.28, 3.20, 3.22, 2.98, 3.45, 3.70, 3.34, 3.18, 3.35, 3.12)
m2 = c(3.22, 3.30, 3.34, 3.28, 3.29, 3.25, 3.30, 3.27, 3.38, 3.34, 3.35, 3.19, 3.35, 3.05, 3.36, 3.28, 3.30, 3.28, 3.30, 3.20, 3.16, 3.33)
mean(m1)
mean(m1)
mean(m2)
var(m1)
var(m2)
length(m1)
length(m2)
sd(m1)
sd(m2)
var(m1)/var(m2)
t = var(m1)/var(m2)
t
df1 = length(m1-1)
df1
df1 = length(m1)-1)
df1
df1 = length(m1)-1
df1
df1 = length(m1)-1
df1
df2 = length(m2)-1
df2
pValue = 2*pf(t, df1, df2, lower.tail = FALSE)
pValue
criticalValueLower=qf(significanceLevel/2, df1, df2)
significanceLevel=0.05
criticalValueLower=qf(significanceLevel/2, df1, df2)
significanceLevel=0.05
criticalValueLower=qf(significanceLevel/2, df1, df2)
criticalValueLower
significanceLevel=0.05
criticalValueLower=qf(significanceLevel/2, df1, df2)
criticalValueLower
criticalValueUpper=qf(1-significanceLevel/2, df1, df2)
criticalValueUpper
var.test(m1,m2)
confidenceInterval = 0.05
df1
df2
cvlower <-qchisq(confidenceInterval/2,df1)
cvupper <-qchisq(1-confidenceInterval/2,df1)
cvlower
cvupper
cilower <-df1*var(m1)/ cvupper
ciupper <-df1*var(m1)/ cvlower
cilower
ciupper
confidenceInterval = 0.05
df2
cvlower2 <-qchisq(confidenceInterval/2,df2)
cvupper2 <-qchisq(1-confidenceInterval/2,df2)
cvlower2
cvupper2
cilower2 <-(df2*var(m2)/cvupper2
ciupper2 <-(df2*var(m2)/cvupper2)
cilower2
ciupper2
sdlower <- (sqrt(confidenceIntervalLower))
sdlower
sdupper <- (sqrt(confidenceIntervalUpper))
sdupper
confidenceInterval = 0.05
df2
cvlower2 <-qchisq(confidenceInterval/2,df2)
cvupper2 <-qchisq(1-confidenceInterval/2,df2)
cvlower2
cvupper2
cilower2 <-(df2*var(m2)/cvupper2)
ciupper2 <-(df2*var(m2)/cvupper2)
cilower2
ciupper2
sdlower <- (sqrt(confidenceIntervalLower))
sdlower
sdupper <- (sqrt(confidenceIntervalUpper))
sdupper
confidenceInterval = 0.05
df2
cvlower2 <-qchisq(confidenceInterval/2,df2)
cvupper2 <-qchisq(1-confidenceInterval/2,df2)
cvlower2
cvupper2
cilower2 <-(df2*var(m2)/cvupper2)
ciupper2 <-(df2*var(m2)/cvupper2)
cilower2
ciupper2
sdlower <- (sqrt(cilower2))
sdlower
sdupper <- (sqrt(ciupper2))
sdupper
testStatistic = 100.55
pValue<-pchisq(testStatistic, df=2, lower.tail=FALSE)
pValue
significancelevel=0.05
criticalValue<-qchisq(significancelevel, df=2, lower.tail=FALSE)
criticalValue
Data<- as.table(rbind(c(29,22), c(95,121),c(518,135)))
Data
chisq.test(Data)
medicaltable <- read.csv("Medical1.csv", header = T)
medicaltable
install.packages("fBasics")
basicStats(medicaltable)
library(fBasics)
basicStats(medicaltable)
F = 5.26
df1 = 2
df2 = 57
pvalue <- 1-pf(F,df1=2, df2=57)
pvalue
F = 5.26
df1 = 2
df2 = 57
pvalue <- 1-pf(F,df1=2, df2=57)
pvalue
matrix = as.matrix(medicaltable)
matrix
r = c(t(matrix))
r
f = c("Florida", "New York", "North Carolina")
f
f = c("Florida", "New York", "North Carolina")
k =3
n = 20
tm = gl(k, n, n*k, factor(f))
tm
matrix = as.matrix(medicaltable)
matrix
r = c(t(matrix))
r
f = c("Florida", "New York", "North Carolina")
k =3
n = 20
t = gl(k, n, n*k, factor(f))
t
a = aov(r ~ t)
summary(a)
k = 3
n = 20
t = gl(k, 1, n*k, factor(f))
t
a = aov(r ~ t)
summary(a)
matrix = as.matrix(medicaltable)
matrix
r = c(t(matrix))
r
f = c("Florida", "New York", "North Carolina")
k = 3
n = 20
t = gl(k, 1, n*k, factor(f))
t
a = aov(r ~ t)
summary(a)
safetytable = read.csv("Safety.csv", header = T)
safetytable
basicStats(safetytable)
lm.safetytable = lm(Fatalaccidents.per.1000 ~ Under.Age21, data = safetytable)
summary(lm.safetytable)
lm.safetytable = lm(Fatalaccidents.per.1000 ~ Under.Age21, data = safetytable)
lm.safetytable = lm(Fatal.Accidents.per.1000 ~ Under.Age.21, data = safetytable)
lm.safetytable = lm(Fatal.Accidents.per.1000 ~ Percent.Under.Age.21, data = safetytable)
lm.safetytable = lm(Fatal.Accidents.per.1000 ~ Percent.Under.21, data = safetytable)
summary(lm.safetytable)
anova(lm.safetytable)
qt((1+0.95)/2, 40)
sd = 0.114
tvalue = qt((1+0.95)/2, 40)
tvalue
moe = tvalue*sd
moe
